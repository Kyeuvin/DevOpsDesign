将DevOps推向主流：批判性评述与概念框架
Michael Gall和Federico Pigni
格勒诺布尔管理学院
5 概念框架
为了推进对DevOps更精确的定义，我们首先需要识别其概念元素，即模型中最简单和最基本的部分。接下来，我们对这些元素进行逻辑分类，以明确定义我们模型的类别。
为了识别概念元素及其逻辑类别，我们进行了三步编码。我们首先对纳入本次综述的研究进行开放式编码（图1步骤9），从而生成我们的一阶代码（Miles et al., 2021）。然后，我们应用主轴编码来发展概念元素及其与一阶代码的关系（Miles et al., 2021）。最后，我们使用选择性编码（Stol et al., 2016; Thomas, 2006）来识别概念元素的分类。关于一阶代码、涌现的概念元素及其类别的详细信息见附录D。为了将我们工作中识别的概念元素与现有的异构DevOps概念化联系起来并锚定，我们使用了选择性编码（Stol et al., 2016; Thomas, 2006）。由于现有的概念化是不完整的（见第2.2节和第4.2节中的标注），并非我们所有的概念元素都能与现有的概念化相关联。这也突显了我们的模型扩展并完善了现有的DevOps概念化。关于现有异构概念化（附录H）如何映射到概念元素的详细信息可在附录G中找到。
我们识别了三个主要类别（文化、自动化、监控）和一个横向类别（持续性），该横向类别并行地影响并适用于所有其他类别（Vosniadou, 2013）。概念元素的持续特性仅应用于一些异构概念化（见附录H，例如持续部署），但在先前的研究中从未明确地指出适用于其他概念化；然而，这种特性作为所有已识别概念元素的关键特征涌现出来。因此，我们认为持续性体现在每个概念元素中，而不是将其单独作为一个类别。在DevOps背景下，每个概念元素都适用于整个软件开发生命周期，并且需要持续地执行。这在DevOps的开发和运维方面尤为突出。这里的例子是持续部署和持续测试。然而，DevOps的文化方面，如持续反馈循环或自主性，也需要持续地发挥作用以实现快速决策。从监控的角度来看，持续性也至关重要。系统需要被持续监控，以便在客户受到影响之前检测到系统的错误状态。此外，团队使用指标持续评估系统的质量，以便能够迭代地改进系统。与敏捷方法类似，DevOps的持续性涵盖了整个软件生命周期，并反映了团队文化的一个重要特征；持续改进再次是交付和运营过程的一致特征。更具体地说，这个横向概念元素的重点是所执行活动的连续性，而不是其执行的速度。因此，我们定义了以下三个类别：持续文化、持续自动化、持续监控。
每个类别由几个概念元素组成。我们识别了两种关键类型的概念元素：描述“必须实现什么”的元素和关注“如何做某事”的元素。这种方法使我们能够明确定义每个类别旨在实现的目标以及如何实现该目标。因此，我们按以下方式构建每个类别的定义：(1)该类别是什么？(2)它旨在实现什么？(3)如何实现目标？在下一节中，我们将讨论三个涌现类别的关联。
5.1 持续文化
先前对文化的概念化采用了狭隘的定义，局限于研究的目标，导致了多个互补的概念化。我们提出文化应包括超越仅仅接受共同责任的方面，并包括协作以及对持续快速周期和反馈的承诺。如第4.2节所述，识别出的来源混淆了将文化用作概念元素或类别的用法。我们不鼓励将文化用作概念元素，并建议将其视为一个类别。基于语义分析，我们识别了以下概念元素（表6）。
协作涉及在开发和运维活动中重新定义角色和团队。这是定义DevOps团队内必要文化的关键概念元素。开发人员和运维人员协作解决问题并交付高质量软件。接受为最终用户交付高质量软件共同责任的文化变革是通过打破组织内的孤岛和促进团队内部的协作来实现的。我们讨论了协作是否应该作为一个独立的类别存在，但正如现有文献所示，它更像是DevOps团队整体文化中的一个关键概念元素。自主性将使联合的DevOps团队能够制定满足开发和运维要求的共同目标。此外，自主性允许DevOps团队决定何时以及如何执行和完成他们的活动。在团队内部，这也培养了端到端的过程所有权、对基础设施和部署的完全控制以及对团队成员所拥有服务的责任感。此外，自主性将给予DevOps团队实验和快速评估特定问题解决方法是否有效的自由。这在团队内部培养了一种“初创”文化，并反映了DevOps的文化方面；因此，我们将其归入此类。DevOps强调沟通是弥合开发团队和运维团队之间差距的手段。建设性的开放式沟通文化和环境使团队能够有效协作。团队之间应该有直接的沟通。工单系统是不恰当的沟通方式，而面对面的沟通将是最佳选择。其他沟通工具如Slack也是合适的选择。共享存在于多个层面并表现出不同的特征，从共享知识、工具和基础设施到共享成功和反馈。共享是定义DevOps团队文化的概念元素之一，使开发和运维更紧密地结合在一起。协作、自主性、沟通和共享可以被描述为DevOps团队内部的文化或心态，使其能够交付高质量软件，因此被归入同一类别。合规性是DevOps团队在软件开发过程中持续满足监管要求的能力。在我们对所选文章进行编码时，我们发现合规性更接近DevOps的文化方面而非自动化方面。一些工具有助于确保合规性，但将安全和合规相关任务左移到开发过程中的思维方式导致将合规性视为一个文化概念元素。快速持续的反馈循环在DevOps中至关重要。反馈在不同层面提供。这里的例子范围从持续集成（允许开发人员快速获得关于其代码质量的反馈）到持续规划（允许团队调整他们的积压工作并响应不断变化的客户需求）。这里最重要的文化元素是收集反馈并快速做出反应的实践已深入团队。由于这又是一个定义团队如何运作以及应用哪些原则的概念元素，我们将其归入持续文化类别。我们识别了一个在现有文献中保持隐含的概念元素：减少冗余任务。当在整个组织大规模采用DevOps时，组织的每个独立团队都必须执行一系列相同或相似的任务。例如，每个团队都必须设置部署流水线来交付软件。通过共享相同的工具集和实践，可以最大限度地减少冗余任务。左移思维模式要求在首次遇到技术问题时解决它们，并在软件生命周期中尽早解决安全、合规和架构问题，这是DevOps的另一个文化方面。最后，快速决策对于团队快速响应事件或变化的需求至关重要，并由赋予团队的自主性和自由所促成。总而言之，我们定义持续文化如下：
持续文化是DevOps团队的共同愿景和行为，其优先考虑在软件开发和运维生命周期中尽早解决问题。持续文化旨在尽可能在生命周期的左端处理任务，以实现持续合规、减少冗余任务，并实现快速决策和持续、快速的反馈循环。这些目标是通过DevOps团队内部的自主性、沟通、协作以及信息和责任的共享来实现的。
5.2 持续自动化
35篇文章讨论了属于DevOps一个关键概念类别的概念元素，我们将其标记为持续自动化。这些文章不要与最初识别的28篇涉及异构概念化自动化的文章（见附录H）混淆。与关于文化的讨论类似，我们认为自动化是一个由几个概念元素组成的类别。我们识别了几个间接提到自动化类别中一个或多个概念元素的来源。自动化的范围从软件初始部署中引入的工具到软件开发和运维所有阶段的全面自动化工作。虽然我们评阅的大多数来源都认为自动化是DevOps的关键组成部分，但只有一项研究报告了它。我们识别了持续自动化的以下概念元素（表7）。
自动化还旨在减少手动活动，并用可预测的、计划的任务来替代它们。DevOps 的一个关键方面是软件的实际部署。自动化部署过程对于提高部署频率至关重要，使组织能够更频繁地发布软件以满足客户需求。在所有开发和运维环境中也追求使用自动化执行持续测试。自动化测试必须尽可能接近开发活动进行，但不能止步于此。在生产环境中运行测试提供了一个基本指标，表明软件已部署并在客户将使用的环境中正常运行。部署和测试都有相关的监控元素。细粒度指标（见第5.3节）用于监控这些活动。然而，这些任务的实际自动化对于在DevOps中实现连续性至关重要，因此与自动化类别相关联。这些目标的实现严重依赖于平台提供的工具集，软件在该平台上运行。这些工具必须支持持续运维、部署和测试。底层软件架构对于实现持续自动化至关重要。例如，基于微服务的架构支持软件的有效部署和运维。具有减少依赖和减少抽象的架构改进了软件的运维和部署。对软件进行架构设计并将弹性构建到初始设计中，使DevOps团队能够优化其运维。架构变更作为向DevOps转型的一部分是必要的。运行和维护软件所需的操作是另一个关键的概念元素。这个概念元素包括诸如生产环境中的自动扩缩容以及执行备份和恢复操作等任务。与这些操作相关的流程需要优化，以便可以重复执行，从而客户无需花费过多时间即可获得软件的新版本。简化流程对于减少手动开销至关重要。我们将与流程相关的概念元素归入自动化类别，因为在采用DevOps时自动化流程是一个关键的成功因素。为了沟通变更并满足合规性要求，系统文档以及与部署相关的操作至关重要。一个常被忽视的方面是文档相关任务的实际自动化，例如自动生成发布说明。将自动化扩展到包括文档相关任务有助于进一步减少手动任务。为了强调其重要性，我们将文档概念元素与持续自动化类别相关联。减少偶发操作是另一个关键的概念元素。偶发操作通常具有系统范围的影响，并涉及多种技术复杂性。在回顾现有文献中引入偶发操作的背景时，发现它们集中于通过增强自动化来减少偶发性任务，而不是文化或团队心态方面；因此，我们将它们与自动化类别相关联。总而言之，我们可以定义持续自动化如下：
持续自动化是以最少人工干预的方式部署、运维、记录文档和（在生产环境中）测试软件。持续自动化旨在减少偶发性和手动操作的数量。这些目标是通过微服务架构、一套流程以及软件运行平台提供的工具集来实现的。
5.3 持续监控
现有文献提供了两个模糊且重叠的持续监控定义。度量从监控业务指标（例如收入）到测试覆盖率各不相同。监控是一项评估软件状态的持续度量活动，从开发阶段开始，并在软件的部署和运维过程中持续进行。由于这两个类别是相关的（度量和监控都依赖于指标），我们将它们合并为一个类别，定义如下：持续监控是在软件开发和运维生命周期中收集和观察软件指标的过程。12个来源讨论了与持续监控相关的概念元素，但不幸的是，没有明确界定任何可以在语义上与此概念类别相关联的概念元素。基于语义分析，我们识别了属于持续监控类别的以下概念元素（表8）。
细粒度指标提供持续监控的基础，并在详细的、依赖于上下文的层面收集。在监控系统时，数据的端到端关联提供了软件的多维度、企业级视图，使DevOps团队能够检测所有应用程序和服务中的质量问题。服务质量是为了评估系统是否在明确定义的目标指标集内运行而定义和监控的一组度量。事件响应是解决和缓解问题所涉及的活动，应实现自动化以允许团队快速反应。洞察力是从记录的指标中导出的信息。透明性是通过在服务和整个组织内共享细粒度指标实现的目标，从而获得软件的多维度、企业级视图。总而言之，我们可以定义持续监控如下：
持续监控是在软件开发和运维生命周期中收集和观察指标的过程。持续监控旨在确保软件的整体质量、快速的事件响应、透明性以及对软件使用的洞察。这些目标是通过在广泛的情境特定细粒度指标上进行端到端关联来实现的。
图 3 总结了DevOps概念框架。